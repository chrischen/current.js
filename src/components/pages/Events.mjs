// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Lingui from "../../locales/Lingui.mjs";
import * as RelayEnv from "../../entry/RelayEnv.mjs";
import * as Localized from "../shared/Localized.mjs";
import * as EventsList from "../organisms/EventsList.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as Core from "@linaria/core";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as EventsQuery_graphql from "../../__generated__/EventsQuery_graphql.mjs";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

var convertVariables = EventsQuery_graphql.Internal.convertVariables;

var convertResponse = EventsQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = EventsQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, EventsQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, EventsQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(EventsQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(EventsQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(EventsQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(EventsQuery_graphql.node, convertVariables);

var EventsQuery = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

function Events(props) {
  var query = ReactRouterDom.useLoaderData();
  var match = usePreloaded(query.data);
  return JsxRuntime.jsx(Localized.make, {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("h1", {
                            children: (t`All Events`)
                          }),
                      JsxRuntime.jsx("div", {
                            className: Core.cx("grid", "grid-cols-1", "gap-y-10", "sm:grid-cols-2", "gap-x-6", "lg:grid-cols-3", "xl:gap-x-8")
                          }),
                      JsxRuntime.jsx(EventsList.make, {
                            events: match.fragmentRefs
                          })
                    ],
                    className: "bg-white"
                  })
            });
}

var LoaderArgs = {};

function loadMessages(lang) {
  var tmp = lang === "jp" ? import("../../locales/src/components/pages/Events/jp") : import("../../locales/src/components/pages/Events/en");
  return [tmp.then(function (messages) {
                Lingui.i18n.load(lang, messages.messages);
              })];
}

function loader(param) {
  var url = new URL(param.request.url);
  var after = url.searchParams.get("after");
  var before = url.searchParams.get("before");
  return ReactRouterDom.defer({
              data: Core__Option.map(RelayEnv.getRelayEnv(param.context, import.meta.env.SSR), (function (env) {
                      return EventsQuery_graphql.load(env, {
                                  after: after,
                                  before: before
                                }, "store-or-network", undefined, undefined);
                    })),
              i18nLoaders: Localized.loadMessages(param.params.lang, loadMessages)
            });
}

var make = Events;

var $$default = Events;

var Component = Events;

export {
  EventsQuery ,
  make ,
  $$default as default,
  Component ,
  LoaderArgs ,
  loadMessages ,
  loader ,
}
/*  Not a pure module */

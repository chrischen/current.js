// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as React from "react";
import * as Layout from "../shared/Layout.re.mjs";
import * as Lingui from "../../locales/Lingui.re.mjs";
import * as RelayEnv from "../../entry/RelayEnv.re.mjs";
import * as Localized from "../shared/i18n/Localized.re.mjs";
import * as EventRsvps from "../organisms/EventRsvps.re.mjs";
import * as ReactIntl from "react-intl";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as EventLocation from "../organisms/EventLocation.re.mjs";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as EventQuery_graphql from "../../__generated__/EventQuery_graphql.re.mjs";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as AppContext from "../layouts/appContext";
import * as DifferenceInMinutes from "date-fns/differenceInMinutes";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

var convertVariables = EventQuery_graphql.Internal.convertVariables;

var convertResponse = EventQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = EventQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, EventQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, EventQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(EventQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(EventQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(EventQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(EventQuery_graphql.node, convertVariables);

var EventQuery = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

var sessionContext = AppContext.SessionContext;

function $$Event(props) {
  var query = ReactRouterDom.useLoaderData();
  var match = usePreloaded(query.data);
  return Core__Option.getOr(Core__Option.map(match.event, (function ($$event) {
                    var fragmentRefs = $$event.fragmentRefs;
                    var title = $$event.title;
                    var $$location = $$event.location;
                    var details = $$event.details;
                    var until = Core__Option.map($$event.startDate, (function (startDate) {
                            return DifferenceInMinutes.differenceInMinutes(Util.Datetime.toDate(startDate), new Date());
                          }));
                    var duration = Core__Option.flatMap($$event.startDate, (function (startDate) {
                            return Core__Option.map($$event.endDate, (function (endDate) {
                                          return DifferenceInMinutes.differenceInMinutes(Util.Datetime.toDate(endDate), Util.Datetime.toDate(startDate));
                                        }));
                          }));
                    var duration$1 = Core__Option.map(duration, (function (duration) {
                            var hours = duration / 60;
                            var minutes = (duration | 0) % 60;
                            if (minutes === 0) {
                              return t`${hours.toString()} hours`;
                            } else {
                              return t`${hours.toString()} hours and ${minutes.toString()} minutes`;
                            }
                          }));
                    return JsxRuntime.jsx(WaitForMessages.make, {
                                children: (function () {
                                    return JsxRuntime.jsxs("main", {
                                                children: [
                                                  JsxRuntime.jsxs("header", {
                                                        children: [
                                                          JsxRuntime.jsxs("div", {
                                                                children: [
                                                                  JsxRuntime.jsx("div", {
                                                                        className: "absolute left-16 top-full -mt-16 transform-gpu opacity-50 blur-3xl xl:left-1/2 xl:-ml-80"
                                                                      }),
                                                                  JsxRuntime.jsx("div", {
                                                                        className: "absolute inset-x-0 bottom-0 h-px bg-gray-900/5"
                                                                      })
                                                                ],
                                                                "aria-hidden": true,
                                                                className: "absolute inset-0 -z-10 overflow-hidden"
                                                              }),
                                                          JsxRuntime.jsx(Layout.Container.make, {
                                                                children: JsxRuntime.jsxs("div", {
                                                                      children: [
                                                                        JsxRuntime.jsx("div", {
                                                                              children: JsxRuntime.jsxs("h1", {
                                                                                    children: [
                                                                                      JsxRuntime.jsxs("div", {
                                                                                            children: [
                                                                                              t`event @`,
                                                                                              " ",
                                                                                              JsxRuntime.jsx("span", {
                                                                                                    children: Core__Option.getOr(Core__Option.flatMap($$location, (function ($$location) {
                                                                                                                return Core__Option.map($$location.name, (function (name) {
                                                                                                                              return JsxRuntime.jsx(ReactRouterDom.Link, {
                                                                                                                                          to: "/locations/" + $$location.id,
                                                                                                                                          children: name
                                                                                                                                        });
                                                                                                                            }));
                                                                                                              })), null),
                                                                                                    className: "text-gray-700"
                                                                                                  })
                                                                                            ],
                                                                                            className: "text-sm leading-6 text-gray-500"
                                                                                          }),
                                                                                      JsxRuntime.jsx("div", {
                                                                                            children: Core__Option.getOr(Core__Option.map(title, (function (prim) {
                                                                                                        return prim;
                                                                                                      })), null),
                                                                                            className: "mt-1 text-base font-semibold leading-6 text-gray-900"
                                                                                          })
                                                                                    ]
                                                                                  }),
                                                                              className: "flex items-center gap-x-6"
                                                                            }),
                                                                        JsxRuntime.jsx("div", {
                                                                              className: "flex items-center gap-x-4 sm:gap-x-6"
                                                                            })
                                                                      ],
                                                                      className: "mx-auto flex max-w-2xl items-center justify-between gap-x-8 lg:mx-0 lg:max-w-none"
                                                                    }),
                                                                className: "py-10"
                                                              })
                                                        ],
                                                        className: "relative isolate pt-4"
                                                      }),
                                                  JsxRuntime.jsx(Layout.Container.make, {
                                                        children: JsxRuntime.jsxs("div", {
                                                              children: [
                                                                JsxRuntime.jsxs("div", {
                                                                      children: [
                                                                        JsxRuntime.jsx("h2", {
                                                                              children: t`Attendees`,
                                                                              className: "sr-only"
                                                                            }),
                                                                        JsxRuntime.jsx(EventRsvps.make, {
                                                                              event: fragmentRefs
                                                                            })
                                                                      ],
                                                                      className: "lg:col-start-3 lg:row-end-1"
                                                                    }),
                                                                JsxRuntime.jsxs("div", {
                                                                      children: [
                                                                        JsxRuntime.jsx("h2", {
                                                                              children: t`Details`,
                                                                              className: "text-base font-semibold leading-6 text-gray-900"
                                                                            }),
                                                                        Core__Option.getOr(Core__Option.flatMap($$event.startDate, (function (startDate) {
                                                                                    return Core__Option.map($$event.endDate, (function (endDate) {
                                                                                                  return JsxRuntime.jsxs("p", {
                                                                                                              children: [
                                                                                                                JsxRuntime.jsx(ReactIntl.FormattedDate, {
                                                                                                                      value: Util.Datetime.toDate(startDate)
                                                                                                                    }),
                                                                                                                " ",
                                                                                                                JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                                                                      value: Util.Datetime.toDate(startDate)
                                                                                                                    }),
                                                                                                                " -> ",
                                                                                                                JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                                                                      value: Util.Datetime.toDate(endDate)
                                                                                                                    }),
                                                                                                                " ",
                                                                                                                Core__Option.getOr(Core__Option.map(duration$1, (function (duration) {
                                                                                                                            return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                                                                                                        children: [
                                                                                                                                          " (",
                                                                                                                                          duration,
                                                                                                                                          ") "
                                                                                                                                        ]
                                                                                                                                      });
                                                                                                                          })), null),
                                                                                                                Core__Option.getOr(Core__Option.map(until, (function (until) {
                                                                                                                            return JsxRuntime.jsx(ReactIntl.FormattedRelativeTime, {
                                                                                                                                        value: until,
                                                                                                                                        unit: "minute",
                                                                                                                                        updateIntervalInSeconds: 1
                                                                                                                                      });
                                                                                                                          })), null)
                                                                                                              ],
                                                                                                              className: "mt-4 lg:text-xl leading-8 text-gray-700"
                                                                                                            });
                                                                                                }));
                                                                                  })), "???"),
                                                                        Core__Option.getOr(Core__Option.flatMap($$location, (function ($$location) {
                                                                                    return Core__Option.map($$location.details, (function (details) {
                                                                                                  return JsxRuntime.jsx("p", {
                                                                                                              children: details,
                                                                                                              className: "mt-4 lg:text-xl leading-8 text-gray-700 whitespace-pre"
                                                                                                            });
                                                                                                }));
                                                                                  })), null),
                                                                        Core__Option.getOr(Core__Option.map(details, (function (details) {
                                                                                    return JsxRuntime.jsx("p", {
                                                                                                children: details,
                                                                                                className: "mt-4 lg:text-xl leading-8 text-gray-700 whitespace-pre"
                                                                                              });
                                                                                  })), null)
                                                                      ],
                                                                      className: "-mx-4 px-4 py-8 shadow-sm ring-1 ring-gray-900/5 sm:mx-0 sm:rounded-lg sm:px-8 sm:pb-14 lg:col-span-2 lg:row-span-2 lg:row-end-2 xl:px-16 xl:pb-20 xl:pt-16"
                                                                    }),
                                                                JsxRuntime.jsxs("div", {
                                                                      children: [
                                                                        JsxRuntime.jsx("h2", {
                                                                              children: t`Event Location`,
                                                                              className: "text-sm font-semibold leading-6 text-gray-900"
                                                                            }),
                                                                        Core__Option.getOr(Core__Option.map($$location, (function ($$location) {
                                                                                    return JsxRuntime.jsx(EventLocation.make, {
                                                                                                location: $$location.fragmentRefs
                                                                                              });
                                                                                  })), null)
                                                                      ],
                                                                      className: "lg:col-start-3"
                                                                    })
                                                              ],
                                                              className: "mx-auto grid max-w-2xl grid-cols-1 grid-rows-1 items-start gap-x-8 gap-y-8 lg:mx-0 lg:max-w-none lg:grid-cols-3"
                                                            }),
                                                        className: "py-16"
                                                      })
                                                ]
                                              });
                                  })
                              });
                  })), JsxRuntime.jsx("div", {
                  children: "Event Doesn't Exist"
                }));
}

var LoaderArgs = {};

function loadMessages(lang) {
  var tmp = lang === "ja" ? import("../../locales/src/components/pages/Event.re/ja") : import("../../locales/src/components/pages/Event.re/en");
  return [tmp.then(function (messages) {
                React.startTransition(function () {
                      Lingui.i18n.load(lang, messages.messages);
                    });
              })];
}

async function loader(param) {
  var params = param.params;
  var url = new URL(param.request.url);
  var after = url.searchParams.get("after");
  var before = url.searchParams.get("before");
  if (import.meta.env.SSR) {
    await Localized.loadMessages(params.lang, loadMessages);
  }
  return ReactRouterDom.defer({
              data: Core__Option.map(RelayEnv.getRelayEnv(param.context, import.meta.env.SSR), (function (env) {
                      return EventQuery_graphql.load(env, {
                                  after: after,
                                  before: before,
                                  eventId: params.eventId,
                                  first: 20
                                }, "store-or-network", undefined, undefined);
                    })),
              i18nLoaders: Caml_option.some(Localized.loadMessages(params.lang, loadMessages))
            });
}

((loader.hydrate = true));

var make = $$Event;

var $$default = $$Event;

var Component = $$Event;

export {
  EventQuery ,
  sessionContext ,
  make ,
  $$default as default,
  Component ,
  LoaderArgs ,
  loadMessages ,
  loader ,
}
/*  Not a pure module */

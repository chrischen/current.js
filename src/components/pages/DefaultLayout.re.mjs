// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Nav from "../organisms/Nav.re.mjs";
import * as Grid from "../vanillaui/atoms/Grid.re.mjs";
import * as React from "react";
import * as Footer from "../organisms/Footer.re.mjs";
import * as Layout from "../shared/Layout.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GlobalQuery from "../shared/GlobalQuery.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as DefaultLayoutQuery_graphql from "../../__generated__/DefaultLayoutQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

import '../../global/static.css'
;

var convertVariables = DefaultLayoutQuery_graphql.Internal.convertVariables;

var convertResponse = DefaultLayoutQuery_graphql.Internal.convertResponse;

RescriptRelay_Query.useQuery(convertVariables, DefaultLayoutQuery_graphql.node, convertResponse);

RescriptRelay_Query.useLoader(convertVariables, DefaultLayoutQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(DefaultLayoutQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

RescriptRelay_Query.$$fetch(DefaultLayoutQuery_graphql.node, convertResponse, convertVariables);

RescriptRelay_Query.fetchPromised(DefaultLayoutQuery_graphql.node, convertResponse, convertVariables);

RescriptRelay_Query.retain(DefaultLayoutQuery_graphql.node, convertVariables);

function DefaultLayout$Layout(props) {
  var viewer = Core__Option.map(props.viewer, (function (v) {
          return v.fragmentRefs;
        }));
  return JsxRuntime.jsx(GlobalQuery.Provider.make, {
              value: viewer,
              children: JsxRuntime.jsxs(Grid.make, {
                    cols: 1,
                    children: [
                      JsxRuntime.jsx(React.Suspense, {
                            children: Caml_option.some(JsxRuntime.jsx(Nav.make, {
                                      query: props.query
                                    })),
                            fallback: "..."
                          }),
                      JsxRuntime.jsx(React.Suspense, {
                            children: Caml_option.some(props.children),
                            fallback: Caml_option.some(JsxRuntime.jsx(Layout.Container.make, {
                                      children: "..."
                                    }))
                          }),
                      JsxRuntime.jsx(Footer.make, {})
                    ]
                  })
            });
}

function DefaultLayout(props) {
  var query = ReactRouterDom.useLoaderData();
  var match = usePreloaded(query.data);
  return JsxRuntime.jsx(DefaultLayout$Layout, {
              children: JsxRuntime.jsx(ReactRouterDom.Outlet, {}),
              query: match.fragmentRefs,
              viewer: match.viewer
            });
}

var make = DefaultLayout;

export {
  make ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.mjs";
import * as RelayEnv from "../../entry/RelayEnv.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as Core from "@linaria/core";
import * as RelayRuntime from "relay-runtime";
import * as JsxRuntime from "react/jsx-runtime";
import * as EventQuery_graphql from "../../__generated__/EventQuery_graphql.mjs";
import * as AppContext from "../layouts/appContext";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.mjs";
import * as CreateEventMutation_graphql from "../../__generated__/CreateEventMutation_graphql.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

var convertVariables = CreateEventMutation_graphql.Internal.convertVariables;

var convertResponse = CreateEventMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = CreateEventMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, CreateEventMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use = RescriptRelay_Mutation.useMutation(convertVariables, CreateEventMutation_graphql.node, convertResponse, convertWrapRawResponse);

var CreateEventMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use
};

var sessionContext = AppContext.SessionContext;

function CreateEvent(props) {
  var match = use(undefined);
  var commitMutationCreate = match[0];
  var onCreateEvent = function (param) {
    var connectionId = RelayRuntime.ConnectionHandler.getConnectionID("client:root", "EventsListFragment_events", undefined);
    commitMutationCreate({
          connections: [connectionId],
          input: {
            description: "Descrition",
            endDate: Caml_option.some(Util.Datetime.fromDate(new Date(2024, 1, 5, 21))),
            startDate: Caml_option.some(Util.Datetime.fromDate(new Date(2024, 1, 5, 18))),
            title: "Event title"
          }
        }, undefined, undefined, undefined, undefined, undefined, undefined);
  };
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsxs("form", {
                          children: [
                            JsxRuntime.jsxs("label", {
                                  children: [
                                    (t`Title`),
                                    ":",
                                    JsxRuntime.jsx("input", {
                                          name: "title",
                                          type: "text"
                                        })
                                  ]
                                }),
                            JsxRuntime.jsxs("label", {
                                  children: [
                                    (t`Start Date`),
                                    ":",
                                    JsxRuntime.jsx("input", {
                                          name: "startDate",
                                          type: "text"
                                        })
                                  ]
                                }),
                            JsxRuntime.jsxs("label", {
                                  children: [
                                    (t`End Date`),
                                    ":",
                                    JsxRuntime.jsx("input", {
                                          name: "endDate",
                                          type: "text"
                                        })
                                  ]
                                }),
                            JsxRuntime.jsx("input", {
                                  type: "submit",
                                  value: "Create"
                                })
                          ],
                          onSubmit: onCreateEvent
                        }),
                    className: Core.cx("grid", "grid-cols-2", "gap-y-10", "sm:grid-cols-4", "gap-x-6", "lg:grid-cols-6", "xl:gap-x-8")
                  }),
              className: "bg-white"
            });
}

var LoaderArgs = {};

function loader(param) {
  var params = param.params;
  var url = new URL(param.request.url);
  var after = url.searchParams.get("after");
  var before = url.searchParams.get("before");
  return Core__Option.map(RelayEnv.getRelayEnv(param.context, import.meta.env.SSR), (function (env) {
                return EventQuery_graphql.load(env, {
                            after: after,
                            before: before,
                            eventId: params.eventId,
                            first: 20
                          }, "store-or-network", undefined, undefined);
              }));
}

var make = CreateEvent;

var $$default = CreateEvent;

var Component = CreateEvent;

export {
  CreateEventMutation ,
  sessionContext ,
  make ,
  $$default ,
  $$default as default,
  Component ,
  LoaderArgs ,
  loader ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.mjs";
import * as React from "react";
import * as Lingui from "../../locales/Lingui.mjs";
import * as Localized from "../shared/Localized.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core from "@linaria/core";
import * as RelayRuntime from "relay-runtime";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as AppContext from "../layouts/appContext";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.mjs";
import * as CreateEventMutation_graphql from "../../__generated__/CreateEventMutation_graphql.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

var convertVariables = CreateEventMutation_graphql.Internal.convertVariables;

var convertResponse = CreateEventMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = CreateEventMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, CreateEventMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use = RescriptRelay_Mutation.useMutation(convertVariables, CreateEventMutation_graphql.node, convertResponse, convertWrapRawResponse);

var CreateEventMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use
};

var isEmptyObj = (obj => Object.keys(obj).length === 0 && obj.constructor === Object);

function parseData(json) {
  if (isEmptyObj(json)) {
    return "Empty";
  } else {
    return {
            TAG: "Promise",
            _0: json
          };
  }
}

var sessionContext = AppContext.SessionContext;

function CreateEvent(props) {
  var match = use();
  var commitMutationCreate = match[0];
  var match$1 = React.useState(function () {
        return "";
      });
  var setState = match$1[1];
  ReactRouterDom.useLoaderData();
  var onCreateEvent = function (param) {
    var connectionId = RelayRuntime.ConnectionHandler.getConnectionID("client:root", "EventsListFragment_events", undefined);
    commitMutationCreate({
          connections: [connectionId],
          input: {
            description: "Descrition",
            endDate: Caml_option.some(Util.Datetime.fromDate(new Date(2024, 1, 5, 21))),
            startDate: Caml_option.some(Util.Datetime.fromDate(new Date(2024, 1, 5, 18))),
            title: "Event title"
          }
        }, undefined, undefined, undefined, undefined, undefined, undefined);
  };
  console.log("Render create event");
  return JsxRuntime.jsx(Localized.WaitForMessages.make, {
              children: (function () {
                  return JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("a", {
                                      children: "Test",
                                      className: "cursor-pointer",
                                      href: "#",
                                      onClick: (function (e) {
                                          e.preventDefault();
                                          console.log("set state");
                                          setState(function (param) {
                                                return "en";
                                              });
                                        })
                                    }),
                                JsxRuntime.jsxs("form", {
                                      children: [
                                        JsxRuntime.jsxs("label", {
                                              children: [
                                                (t`Title`),
                                                ":",
                                                JsxRuntime.jsx("input", {
                                                      name: "title",
                                                      type: "text"
                                                    })
                                              ]
                                            }),
                                        JsxRuntime.jsxs("label", {
                                              children: [
                                                (t`Start Date`),
                                                ":",
                                                JsxRuntime.jsx("input", {
                                                      name: "startDate",
                                                      type: "text"
                                                    })
                                              ]
                                            }),
                                        JsxRuntime.jsxs("label", {
                                              children: [
                                                (t`End Date`),
                                                ":",
                                                JsxRuntime.jsx("input", {
                                                      name: "endDate",
                                                      type: "text"
                                                    })
                                              ]
                                            }),
                                        JsxRuntime.jsx("input", {
                                              type: "submit",
                                              value: "Create"
                                            })
                                      ],
                                      onSubmit: onCreateEvent
                                    })
                              ],
                              className: Core.cx("grid", "grid-cols-2", "gap-y-10", "sm:grid-cols-4", "gap-x-6", "lg:grid-cols-6", "xl:gap-x-8")
                            });
                })
            });
}

var LoaderArgs = {};

function loadMessages(lang) {
  var tmp = lang === "ja" ? import("../../locales/src/components/pages/CreateEvent/ja") : import("../../locales/src/components/pages/CreateEvent/en");
  return [tmp.then(function (messages) {
                React.startTransition(function () {
                      Lingui.i18n.load(lang, messages.messages);
                    });
              })];
}

async function loader(param) {
  var params = param.params;
  var url = new URL(param.request.url);
  url.searchParams.get("after");
  url.searchParams.get("before");
  if (import.meta.env.SSR) {
    await Localized.loadMessages(params.lang, loadMessages);
  }
  return ReactRouterDom.defer({
              i18nLoaders: import.meta.env.SSR ? undefined : Caml_option.some(Localized.loadMessages(params.lang, loadMessages))
            });
}

var make = CreateEvent;

var $$default = CreateEvent;

var Component = CreateEvent;

export {
  CreateEventMutation ,
  isEmptyObj ,
  parseData ,
  sessionContext ,
  make ,
  $$default as default,
  Component ,
  LoaderArgs ,
  loadMessages ,
  loader ,
}
/*  Not a pure module */

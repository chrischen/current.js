// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Lingui from "../../locales/Lingui.mjs";
import * as ReactIntl from "react-intl";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as React from "@lingui/react";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as Json$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json.mjs";
import * as Json_Decode$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json_Decode.mjs";

import { css, cx } from '@linaria/core'
;

function parse(json) {
  var decoder = Json_Decode$JsonCombinators.object(function (field) {
        return {
                lang: field.optional("lang", Json_Decode$JsonCombinators.string),
                locale: field.optional("locale", Json_Decode$JsonCombinators.string)
              };
      });
  try {
    return Json$JsonCombinators.decode(json, decoder);
  }
  catch (exn){
    return {
            TAG: "Error",
            _0: "An unexpected error occurred when checking the id."
          };
  }
}

var RouteParams = {
  parse: parse
};

function Lang(props) {
  ReactRouterDom.useLoaderData();
  return JsxRuntime.jsx(React.I18nProvider, {
              i18n: Lingui.i18n,
              children: JsxRuntime.jsx(ReactIntl.IntlProvider, {
                    locale: "ja",
                    children: JsxRuntime.jsx(ReactRouterDom.Outlet, {})
                  })
            });
}

var LoaderArgs = {};

async function loader(param) {
  new URL(param.request.url);
  var lang = Core__Option.getOr(param.params.lang, "en");
  var locale = lang === "ja" ? "jp" : "us";
  Lingui.i18n.activate(lang);
  return {
          locale: locale,
          lang: lang
        };
}

((loader.hydrate = false));

var make = Lang;

var $$default = Lang;

var Component = Lang;

export {
  RouteParams ,
  make ,
  $$default as default,
  Component ,
  LoaderArgs ,
  loader ,
}
/*  Not a pure module */

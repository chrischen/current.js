// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Nav from "../organisms/Nav.mjs";
import * as React from "react";
import * as Footer from "../organisms/Footer.mjs";
import * as Lingui from "../../locales/Lingui.mjs";
import * as RelayEnv from "../../entry/RelayEnv.mjs";
import * as Container from "../vanillaui/atoms/Container.mjs";
import * as Localized from "../shared/Localized.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GlobalQuery from "../shared/GlobalQuery.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.mjs";
import * as Json$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json.mjs";
import * as NavigationMenu from "../ui/navigation-menu";
import * as DefaultLayoutQuery_graphql from "../../__generated__/DefaultLayoutQuery_graphql.mjs";
import * as Json_Decode$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json_Decode.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

import '../../global/static.css'
;

var convertVariables = DefaultLayoutQuery_graphql.Internal.convertVariables;

var convertResponse = DefaultLayoutQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = DefaultLayoutQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, DefaultLayoutQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, DefaultLayoutQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(DefaultLayoutQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(DefaultLayoutQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(DefaultLayoutQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(DefaultLayoutQuery_graphql.node, convertVariables);

var DefaultLayoutQuery = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

var make = NavigationMenu.MenuInstance;

var MenuInstance = {
  make: make
};

function DefaultLayout$Layout(props) {
  var viewer = Core__Option.map(props.viewer, (function (v) {
          return v.fragmentRefs;
        }));
  return JsxRuntime.jsx(GlobalQuery.Provider.make, {
              value: viewer,
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx(React.Suspense, {
                            children: Caml_option.some(JsxRuntime.jsx(Nav.make, {
                                      query: props.query
                                    })),
                            fallback: "..."
                          }),
                      JsxRuntime.jsx(React.Suspense, {
                            children: Caml_option.some(props.children),
                            fallback: "..."
                          }),
                      JsxRuntime.jsx(Footer.make, {})
                    ]
                  })
            });
}

var Layout = {
  make: DefaultLayout$Layout
};

function parse(json) {
  var decoder = Json_Decode$JsonCombinators.object(function (field) {
        return {
                lang: field.optional("lang", Json_Decode$JsonCombinators.string)
              };
      });
  try {
    return Json$JsonCombinators.decode(json, decoder);
  }
  catch (exn){
    return {
            TAG: "Error",
            _0: "An unexpected error occurred when checking the id."
          };
  }
}

var RouteParams = {
  parse: parse
};

function DefaultLayout(props) {
  var query = ReactRouterDom.useLoaderData();
  ReactRouterDom.useParams();
  var match = usePreloaded(query.data);
  return JsxRuntime.jsx(Container.make, {
              children: JsxRuntime.jsx(DefaultLayout$Layout, {
                    children: JsxRuntime.jsx(ReactRouterDom.Outlet, {}),
                    query: match.fragmentRefs,
                    viewer: match.viewer
                  })
            });
}

function loadMessages(lang) {
  var tmp = lang === "ja" ? import("../../locales/src/components/organisms/Nav/ja") : import("../../locales/src/components/organisms/Nav/en");
  return [tmp.then(function (messages) {
                React.startTransition(function () {
                      Lingui.i18n.load(lang, messages.messages);
                    });
              })];
}

var LoaderArgs = {};

async function loader(param) {
  return ReactRouterDom.defer({
              data: Core__Option.map(RelayEnv.getRelayEnv(param.context, import.meta.env.SSR), (function (env) {
                      return DefaultLayoutQuery_graphql.load(env, undefined, "store-or-network", undefined, undefined);
                    })),
              i18nLoaders: Caml_option.some(Localized.loadMessages(param.params.lang, loadMessages))
            });
}

var HydrateFallbackElement = JsxRuntime.jsx("div", {
      children: "Loading fallback..."
    });

var make$1 = DefaultLayout;

var $$default = DefaultLayout;

var Component = DefaultLayout;

export {
  DefaultLayoutQuery ,
  MenuInstance ,
  Layout ,
  RouteParams ,
  make$1 as make,
  $$default as default,
  Component ,
  loadMessages ,
  LoaderArgs ,
  loader ,
  HydrateFallbackElement ,
}
/*  Not a pure module */

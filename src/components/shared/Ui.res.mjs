// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Layout from "./Layout.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import ReactImgix from "react-imgix";
import * as ReactImgix$1 from "react-imgix";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Core from "@linaria/core";
import * as JsxRuntime from "react/jsx-runtime";
import * as ReactCompareSlider from "react-compare-slider";
import * as Solid from "@heroicons/react/solid";

import { css, cx } from '@linaria/core'
;

function stringToElement(str) {
  return str;
}

function addLazyLoad(className) {
  return Core.cx("lazyload", className);
}

var ReactCompareSlider$1 = {};

var ReactCompareSliderImage = {};

var defaults = {
  auto: "format",
  fit: "crop",
  crop: "faces"
};

function addFormat(auto) {
  return Belt_Option.getWithDefault(Belt_Option.map(auto, (function (auto) {
                    var values = auto.split(",");
                    var match = values.find(function (x) {
                          return x === "format";
                        });
                    if (match !== undefined) {
                      return auto;
                    } else {
                      return ["format"].concat(values).join(",");
                    }
                  })), "format");
}

function addDefaults(params) {
  params.auto = addFormat(params.auto);
  return params;
}

var ImgixParams = {
  defaults: defaults,
  addFormat: addFormat,
  addDefaults: addDefaults
};

function make(imgixParams, src, alt, param) {
  return {
          src: src,
          alt: alt,
          imgixParams: imgixParams
        };
}

var $$Image = {
  make: make
};

var Imgix = {};

var Source_Imgix = {};

var Picture_Imgix = {};

function toArray(breakpoints) {
  return [
          [
            breakpoints.xxl,
            "1536"
          ],
          [
            breakpoints.xl,
            "1280"
          ],
          [
            breakpoints.lg,
            "1024"
          ],
          [
            breakpoints.md,
            "768"
          ],
          [
            breakpoints.sm,
            "640"
          ]
        ];
}

var Breakpoints = {
  toArray: toArray
};

function make$1(props) {
  var __lazyLoad = props.lazyLoad;
  var alt = props.alt;
  var imgixParams = props.imgixParams;
  var breakpoints = props.breakpoints;
  var sources = props.sources;
  var className = props.className;
  var src = props.src;
  var lazyLoad = __lazyLoad !== undefined ? __lazyLoad : true;
  var makeDefault = function (source) {
    return JsxRuntime.jsx(ReactImgix, {
                src: src,
                className: lazyLoad ? Core__Option.mapOr(className, Core.cx("lazyload", ""), addLazyLoad) : className,
                sizes: source.sizes,
                alt: alt,
                attributeConfig: lazyLoad ? ({
                      src: "data-src",
                      srcSet: "data-srcset",
                      sizes: "data-sizes"
                    }) : undefined,
                imgixParams: (function (params) {
                      return Belt_Option.getWithDefault(Belt_Option.map(params !== undefined ? params : imgixParams, addDefaults), defaults);
                    })(source.imgixParams),
                width: source.width,
                height: source.height,
                disableLibraryParam: true
              });
  };
  var makeSource = function (source) {
    return JsxRuntime.jsx(ReactImgix$1.Source, {
                src: src,
                sizes: source.sizes,
                attributeConfig: lazyLoad ? ({
                      src: "data-src",
                      srcSet: "data-srcset",
                      sizes: "data-sizes"
                    }) : undefined,
                imgixParams: (function (params) {
                      return Belt_Option.getWithDefault(Belt_Option.map(params !== undefined ? params : imgixParams, addDefaults), defaults);
                    })(source.imgixParams),
                htmlAttributes: source.htmlAttributes,
                width: source.width,
                height: source.height,
                disableLibraryParam: true
              }, Belt_Option.getWithDefault(Belt_Option.map(source.htmlAttributes, (function (x) {
                          return x.media;
                        })), ""));
  };
  var tmp;
  if (breakpoints !== undefined) {
    var sources$1 = [];
    toArray(breakpoints).forEach(function (param) {
          var $$break = param[1];
          Belt_Option.map(param[0], (function (source) {
                  var source_htmlAttributes = Caml_option.some(Belt_Option.mapWithDefault(source.htmlAttributes, {
                            media: "(min-width: " + $$break + "px)"
                          }, (function (attrs) {
                              return Object.assign({
                                          media: "(min-width: " + $$break + "px)"
                                        }, attrs);
                            })));
                  var source_imgixParams = source.imgixParams;
                  var source_width = source.width;
                  var source_height = source.height;
                  var source_sizes = source.sizes;
                  var source$1 = {
                    htmlAttributes: source_htmlAttributes,
                    imgixParams: source_imgixParams,
                    width: source_width,
                    height: source_height,
                    sizes: source_sizes
                  };
                  sources$1.push(makeSource(source$1));
                }));
        });
    tmp = JsxRuntime.jsxs(ReactImgix$1.Picture, {
          children: [
            sources$1,
            makeDefault(breakpoints.default)
          ]
        });
  } else {
    tmp = Belt_Option.getWithDefault(Belt_Option.map(sources, (function (srcs) {
                return JsxRuntime.jsxs(ReactImgix$1.Picture, {
                            children: [
                              Belt_Array.map(srcs.sources, makeSource),
                              makeDefault(srcs.default)
                            ]
                          });
              })), null);
  }
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                lazyLoad ? JsxRuntime.jsx("noscript", {
                        children: React.createElement(make$1, {
                              src: src,
                              className: className,
                              sources: sources,
                              breakpoints: breakpoints,
                              imgixParams: imgixParams,
                              alt: alt,
                              lazyLoad: false
                            })
                      }) : null,
                tmp
              ]
            });
}

var Picture = {
  make: make$1
};

function make$2(props) {
  var __lazyLoad = props.lazyLoad;
  var height = props.height;
  var width = props.width;
  var alt = props.alt;
  var className = props.className;
  var src = props.src;
  var lazyLoad = __lazyLoad !== undefined ? __lazyLoad : true;
  var base = JsxRuntime.jsx("img", {
        alt: alt,
        height: height,
        width: width
      });
  if (lazyLoad) {
    return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                children: [
                  JsxRuntime.jsx("noscript", {
                        children: React.createElement(make$2, {
                              src: src,
                              className: className,
                              alt: alt,
                              width: width,
                              height: height,
                              lazyLoad: false
                            })
                      }),
                  React.cloneElement(base, {
                        src: undefined,
                        "data-src": Caml_option.some(src),
                        className: Core__Option.mapOr(className, Core.cx("lazyload", ""), addLazyLoad)
                      })
                ]
              });
  } else {
    return React.cloneElement(base, {
                src: Caml_option.some(src),
                "data-src": undefined,
                className: className
              });
  }
}

var Img = {
  make: make$2
};

function make$3(props) {
  var __lazyLoad = props.lazyLoad;
  var height = props.height;
  var width = props.width;
  var breakpoints = props.breakpoints;
  var domain = props.domain;
  var imgixParams = props.imgixParams;
  var className = props.className;
  var alt = props.alt;
  var src = props.src;
  var lazyLoad = __lazyLoad !== undefined ? __lazyLoad : true;
  var sizes = breakpoints !== undefined ? Belt_Option.map(Belt_Array.reduce(toArray(breakpoints), "", (function (sizes, param) {
                var value = param[0];
                if (value === undefined) {
                  return sizes;
                }
                var size = param[1];
                if (sizes === "") {
                  return "(min-width: " + size + "px) " + value;
                } else {
                  return sizes + ", " + ("(min-width: " + size + "px) ") + value;
                }
              })), (function (sizes) {
            if (sizes === "") {
              return breakpoints.default;
            } else {
              return sizes + ", " + breakpoints.default;
            }
          })) : props.sizes;
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                lazyLoad ? JsxRuntime.jsx("noscript", {
                        children: React.createElement(make$3, {
                              src: src,
                              alt: alt,
                              className: className,
                              imgixParams: imgixParams,
                              domain: domain,
                              sizes: sizes,
                              breakpoints: breakpoints,
                              width: width,
                              height: height,
                              lazyLoad: false
                            })
                      }) : null,
                process.env.NODE_ENV === "development" ? JsxRuntime.jsx(make$2, {
                        src: src,
                        className: className,
                        alt: alt,
                        lazyLoad: lazyLoad
                      }) : JsxRuntime.jsx(ReactImgix, {
                        src: src,
                        className: lazyLoad ? Core__Option.mapOr(className, Core.cx("lazyload", ""), addLazyLoad) : className,
                        sizes: sizes,
                        alt: alt,
                        attributeConfig: lazyLoad ? ({
                              src: "data-src",
                              srcSet: "data-srcset",
                              sizes: "data-sizes"
                            }) : undefined,
                        imgixParams: Belt_Option.getWithDefault(Belt_Option.map(imgixParams, addDefaults), defaults),
                        domain: domain,
                        width: width,
                        height: height,
                        disableLibraryParam: true
                      })
              ]
            });
}

var DImg = {
  make: make$3
};

var Icon = {};

var style = Core.cx("h-5", "w-5", "text-yellow-400");

function Ui$ExclamationIcon(props) {
  return JsxRuntime.jsx(Solid.ExclamationIcon, {
              className: style,
              "aria-hidden": props.ariaHidden
            });
}

var ExclamationIcon = {
  Icon: Icon,
  style: style,
  make: Ui$ExclamationIcon
};

function Ui$Alert(props) {
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("div", {
                            children: JsxRuntime.jsx(Ui$ExclamationIcon, {
                                  ariaHidden: "true"
                                }),
                            className: (cx('flex-shrink-0'))
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("h3", {
                                    children: props.title,
                                    className: "text-sm font-bold text-yellow-800"
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("p", {
                                          children: props.message
                                        }),
                                    className: (cx(css`
              font-family: 'futura-pt', sans-serif;
          `, 'mt-2','text-sm', 'text-yellow-700'))
                                  })
                            ],
                            className: "ml-3"
                          })
                    ],
                    className: (cx('flex'))
                  }),
              className: Core.cx("rounded-md", "bg-yellow-50", "p-4", "mb-8")
            });
}

var Alert = {
  make: Ui$Alert
};

var style$1 = Core.cx("py-8");

var actionStyle = Core.cx((css`
      a {
        font-family: 'futura-pt', Helvetica, sans-serif;
        @apply ml-3 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-bold text-white bg-primary-900 hover:bg-primary-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-900;
      }
  `), "mt-4", "flex", "md:mt-0", "md:ml-4");

function Ui$PageHeading(props) {
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("h1", {
                                    children: props.title,
                                    className: (cx('text-2xl', 'font-bold', 'leading-7', 'text-gray-900', 'sm:text-3xl', 'sm:truncate'))
                                  }),
                              JsxRuntime.jsx("p", {
                                    children: props.description,
                                    className: (cx('mb-3'))
                                  })
                            ],
                            className: (cx('flex-1', 'min-w-0'))
                          }),
                      JsxRuntime.jsx("div", {
                            children: props.action,
                            className: actionStyle
                          })
                    ],
                    className: (cx('md:flex', 'md:items-center', 'md:justify-between'))
                  }),
              className: "py-8"
            });
}

var PageHeading = {
  style: style$1,
  actionStyle: actionStyle,
  make: Ui$PageHeading
};

var style$2 = Core.cx((css`
  img {
    @apply h-5;
  }`), "mt-6", "grid", "grid-cols-2", "gap-8", "md:grid-cols-3", "lg:grid-cols-4");

function Ui$Press(props) {
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                JsxRuntime.jsx("p", {
                      children: "Select mentions in the press",
                      className: (cx('text-center','text-sm','font-semibold','uppercase','text-gray-500','tracking-wide'))
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("a", {
                                    children: JsxRuntime.jsx("img", {
                                          alt: "Wired Magazine Instapainting Robo Painter",
                                          src: "//static3.instapainting.com/images/press/mini-logos/wired.png",
                                          srcSet: "//static3.instapainting.com/images/press/mini-logos/wired@2x.png 2x"
                                        }),
                                    href: "/press"
                                  }),
                              className: (cx('col-span-1','flex','justify-center','md:col-span-1','lg:col-span-1'))
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("a", {
                                    children: JsxRuntime.jsx("img", {
                                          alt: "Instapainting.com on Techcrunch",
                                          src: "//static3.instapainting.com/images/press/mini-logos/techcrunch.png",
                                          srcSet: "//static3.instapainting.com/images/press/mini-logos/techcrunch.png 2x"
                                        }),
                                    href: "/press"
                                  }),
                              className: (cx('col-span-1','flex','justify-center','md:col-span-1','lg:col-span-1'))
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("a", {
                                    children: JsxRuntime.jsx("img", {
                                          alt: "Instapainting.com AI Painter on Engadget",
                                          src: "//static3.instapainting.com/images/press/mini-logos/engadget.png",
                                          srcSet: "//static3.instapainting.com/images/press/mini-logos/engadget@2x.png 2x"
                                        }),
                                    href: "/press"
                                  }),
                              className: (cx('col-span-1','flex','justify-center','md:col-span-1','lg:col-span-1'))
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("a", {
                                    children: JsxRuntime.jsx("img", {
                                          alt: "Instapainting.com on Backchannel",
                                          src: "//static3.instapainting.com/images/press/mini-logos/backchannel.png",
                                          srcSet: "//static3.instapainting.com/images/press/mini-logos/backchannel@2x.png 2x"
                                        }),
                                    href: "/press",
                                    rel: "nofollow"
                                  }),
                              className: (cx('col-span-1','flex','justify-center','md:col-span-1','lg:col-span-1'))
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("a", {
                                    children: JsxRuntime.jsx("img", {
                                          alt: "Intrepid Robot Artist Creates 36-Hour Crowd-Sourced Painting",
                                          src: "//static3.instapainting.com/images/press/mini-logos/artnet.png",
                                          srcSet: "//static3.instapainting.com/images/press/mini-logos/artnet@2x.png 2x"
                                        }),
                                    href: "/press"
                                  }),
                              className: (cx('col-span-1','flex','justify-center','md:col-span-1','lg:col-span-1','lg:col-start-2'))
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("a", {
                                    children: JsxRuntime.jsx("img", {
                                          alt: "A Robot Spent 36 Hours Painting This Abstract Masterpiece",
                                          src: "//static3.instapainting.com/images/press/mini-logos/mental_floss.png",
                                          srcSet: "//static3.instapainting.com/images/press/mini-logos/mental_floss@2x.png 2x"
                                        }),
                                    href: "/press"
                                  }),
                              className: (cx('col-span-1','flex','justify-center','md:col-span-1','lg:col-span-1'))
                            })
                      ],
                      className: style$2
                    })
              ]
            });
}

var Press = {
  style: style$2,
  make: Ui$Press
};

function Ui$Hero(props) {
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              className: (cx('absolute','inset-x-0','bottom-0','h-1/2','bg-gray-100'))
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsxs("div", {
                                            children: [
                                              React.cloneElement(props.image, {
                                                    src: "https://images.instapainting.com/61ca669e008a00c2258b4596.jpg?auto=format&fit=crop,max&w=2830&q=80&sat=-100",
                                                    className: (cx('h-full','w-full','object-cover'))
                                                  }),
                                              JsxRuntime.jsx("div", {
                                                    className: (cx('absolute','inset-0','bg-primary-900','mix-blend-multiply'))
                                                  })
                                            ],
                                            className: (cx('absolute','inset-0'))
                                          }),
                                      JsxRuntime.jsxs("div", {
                                            children: [
                                              JsxRuntime.jsxs("h1", {
                                                    children: [
                                                      JsxRuntime.jsx("span", {
                                                            children: props.title,
                                                            className: (cx('block','text-white'))
                                                          }),
                                                      JsxRuntime.jsx("span", {
                                                            children: props.title2,
                                                            className: (cx('block','text-primary-800'))
                                                          })
                                                    ],
                                                    className: (cx('text-center','text-4xl','font-extrabold','tracking-tight','sm:text-5xl','lg:text-6xl'))
                                                  }),
                                              JsxRuntime.jsx("p", {
                                                    children: props.description,
                                                    className: (cx('mt-6','max-w-lg','mx-auto','text-center','text-xl','text-primary-900','sm:max-w-3xl'))
                                                  }),
                                              JsxRuntime.jsx("div", {
                                                    children: JsxRuntime.jsxs("div", {
                                                          children: [
                                                            React.cloneElement(props.action1, {
                                                                  className: (cx('flex','items-center','justify-center','px-4','py-3','border','border-transparent','text-base','font-medium','rounded-md','shadow-sm','text-primary-900','bg-white','sm:px-8'))
                                                                }),
                                                            React.cloneElement(props.action2, {
                                                                  className: (cx('flex items-center justify-center px-4 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-primary-900 bg-opacity-60 hover:bg-opacity-70 sm:px-8'))
                                                                })
                                                          ],
                                                          className: (cx('space-y-4','sm:space-y-0','sm:mx-auto','sm:inline-grid','sm:grid-cols-2','sm:gap-5'))
                                                        }),
                                                    className: (cx('mt-10','max-w-sm','mx-auto','sm:max-w-none','sm:flex','sm:justify-center'))
                                                  })
                                            ],
                                            className: (cx('relative','px-4','py-16','sm:px-6','sm:py-24','lg:py-32','lg:px-8'))
                                          })
                                    ],
                                    className: (cx('relative','shadow-xl','sm:rounded-2xl','sm:overflow-hidden'))
                                  }),
                              className: (cx('max-w-screen-2xl','mx-auto','sm:px-6','lg:px-8'))
                            })
                      ],
                      className: (cx('relative','sm:pt-8'))
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("div", {
                            children: JsxRuntime.jsx(Ui$Press, {}),
                            className: (cx('max-w-screen-2xl','mx-auto','py-16','px-4','sm:px-6','lg:px-8'))
                          }),
                      className: (cx('bg-gray-100'))
                    })
              ]
            });
}

var Hero = {
  make: Ui$Hero
};

function Ui$Hero2(props) {
  return JsxRuntime.jsxs("main", {
              children: [
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsxs("h1", {
                                    children: [
                                      JsxRuntime.jsx("span", {
                                            children: props.title,
                                            className: (cx('block','xl:inline'))
                                          }),
                                      JsxRuntime.jsx("span", {
                                            children: props.title2,
                                            className: (cx('block','text-primary-900','xl:inline'))
                                          })
                                    ],
                                    className: (cx('text-4xl','tracking-tight','font-extrabold','text-gray-900','sm:text-5xl','md:text-6xl','lg:text-5xl','xl:text-6xl'))
                                  }),
                              JsxRuntime.jsx("p", {
                                    children: props.description,
                                    className: (cx('mt-3','max-w-md','mx-auto','text-lg','text-gray-500','sm:text-xl','md:mt-5','md:max-w-3xl'))
                                  }),
                              JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsx("div", {
                                            children: React.cloneElement(props.action1, {
                                                  className: (cx('w-full','flex','items-center','justify-center','px-8','py-3','border','border-transparent','text-base','font-medium','rounded-md','text-white','bg-primary-900','hover:bg-primary-800','md:py-4','md:text-lg','md:px-10'))
                                                }),
                                            className: (cx('rounded-md','shadow'))
                                          }),
                                      JsxRuntime.jsx("div", {
                                            children: React.cloneElement(props.action2, {
                                                  className: (cx('w-full','flex','items-center','justify-center','px-8','py-3','border','border-transparent','text-base','font-medium','rounded-md','text-primary-900','bg-white','hover:bg-gray-50','md:py-4','md:text-lg','md:px-10'))
                                                }),
                                            className: (cx('mt-3','rounded-md','shadow','sm:mt-0','sm:ml-3'))
                                          })
                                    ],
                                    className: (cx('mt-10','sm:flex','sm:justify-center','lg:justify-start'))
                                  })
                            ],
                            className: (cx('px-4','lg:w-1/2','sm:px-8','xl:pr-16'))
                          }),
                      className: (cx('mx-auto','max-w-7xl','w-full','pt-16','pb-20','text-center','lg:py-48','lg:text-left'))
                    }),
                JsxRuntime.jsx("div", {
                      children: React.cloneElement(props.image, {
                            className: (cx('absolute','inset-0','w-full','h-full','object-cover'))
                          }),
                      className: (cx('relative','w-full','h-64','sm:h-72','md:h-96','lg:absolute','lg:inset-y-0','lg:right-0','lg:w-1/2','lg:h-full'))
                    })
              ],
              className: (cx('lg:relative'))
            });
}

var Hero2 = {
  make: Ui$Hero2
};

function Ui$HeroSlider(props) {
  var image2 = props.image2;
  var image1 = props.image1;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("svg", {
                            children: [
                              JsxRuntime.jsx("defs", {
                                    children: JsxRuntime.jsx("pattern", {
                                          children: JsxRuntime.jsx("rect", {
                                                className: (cx('text-gray-200')),
                                                height: String(4),
                                                width: String(4),
                                                fill: "currentColor",
                                                x: String(0),
                                                y: String(0)
                                              }),
                                          id: "9ebea6f4-a1f5-4d96-8c4e-4c2abf658047",
                                          height: String(20),
                                          width: String(20),
                                          patternUnits: "userSpaceOnUse",
                                          x: String(118),
                                          y: String(0)
                                        })
                                  }),
                              JsxRuntime.jsx("rect", {
                                    className: (cx('text-gray-50')),
                                    height: String(640),
                                    width: String(640),
                                    fill: "currentColor",
                                    y: String(72)
                                  }),
                              JsxRuntime.jsx("rect", {
                                    height: String(784),
                                    width: String(404),
                                    fill: "url(#9ebea6f4-a1f5-4d96-8c4e-4c2abf658047)",
                                    x: String(118)
                                  })
                            ],
                            className: (cx('absolute','top-0','left-1/2','transform','translate-x-64','-translate-y-8')),
                            height: String(784),
                            width: String(640),
                            fill: "none",
                            viewBox: "0 0 640 784"
                          }),
                      "aria-hidden": true,
                      className: (cx('hidden','lg:block','lg:absolute','lg:inset-0'))
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx(Layout.Container.make, {
                            children: JsxRuntime.jsx("main", {
                                  children: JsxRuntime.jsxs("div", {
                                        children: [
                                          JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsx("h1", {
                                                        children: JsxRuntime.jsxs("span", {
                                                              children: [
                                                                JsxRuntime.jsx("span", {
                                                                      children: props.title,
                                                                      className: (cx('block','text-gray-900'))
                                                                    }),
                                                                JsxRuntime.jsx("span", {
                                                                      children: props.title2,
                                                                      className: (cx('block','text-primary-900'))
                                                                    })
                                                              ],
                                                              className: (cx('mt-1','block','text-4xl','tracking-tight','font-extrabold','sm:text-5xl','xl:text-6xl'))
                                                            })
                                                      }),
                                                  JsxRuntime.jsx("h2", {
                                                        children: JsxRuntime.jsx("span", {
                                                              children: Belt_Option.mapWithDefault(props.subtitle, null, (function (prim) {
                                                                      return prim;
                                                                    })),
                                                              className: (cx('block','text-sm','font-semibold','uppercase','tracking-wide','text-gray-500','sm:text-base','lg:text-sm','xl:text-base'))
                                                            })
                                                      }),
                                                  JsxRuntime.jsx("p", {
                                                        children: props.description,
                                                        className: (cx('mt-3','text-base','text-gray-500','sm:mt-5','sm:text-xl','lg:text-lg','xl:text-xl'))
                                                      }),
                                                  JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsx("p", {
                                                                className: (cx('text-base','font-medium','text-gray-900'))
                                                              }),
                                                          React.cloneElement(props.action1, {
                                                                className: (cx('w-full','px-6','py-3','border','border-transparent','text-base','font-medium','rounded-md','text-white','bg-gray-800','shadow-sm','hover:bg-gray-900','focus:outline-none','focus:ring-2','focus:ring-offset-2','focus:ring-indigo-500',' sm:flex-shrink-0','sm:inline-flex','sm:items-center','sm:w-auto'))
                                                              })
                                                        ],
                                                        className: (cx('mt-8','sm:max-w-lg','sm:mx-auto','sm:text-center','lg:text-left','lg:mx-0'))
                                                      })
                                                ],
                                                className: (cx('sm:text-center','md:max-w-2xl','md:mx-auto','lg:col-span-6','lg:text-left'))
                                              }),
                                          JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsxs("svg", {
                                                        children: [
                                                          JsxRuntime.jsx("defs", {
                                                                children: JsxRuntime.jsx("pattern", {
                                                                      children: JsxRuntime.jsx("rect", {
                                                                            className: (cx('text-gray-200')),
                                                                            height: String(4),
                                                                            width: String(4),
                                                                            fill: "currentColor",
                                                                            x: String(0),
                                                                            y: String(0)
                                                                          }),
                                                                      id: "4f4f415c-a0e9-44c2-9601-6ded5a34a13e",
                                                                      height: String(20),
                                                                      width: String(20),
                                                                      patternUnits: "userSpaceOnUse",
                                                                      x: String(118),
                                                                      y: String(0)
                                                                    })
                                                              }),
                                                          JsxRuntime.jsx("rect", {
                                                                className: (cx('text-gray-50')),
                                                                height: String(640),
                                                                width: String(640),
                                                                fill: "currentColor",
                                                                y: String(72)
                                                              }),
                                                          JsxRuntime.jsx("rect", {
                                                                height: String(784),
                                                                width: String(404),
                                                                fill: "url(#4f4f415c-a0e9-44c2-9601-6ded5a34a13e)",
                                                                x: String(118)
                                                              })
                                                        ],
                                                        "aria-hidden": true,
                                                        className: (cx('absolute','top-0','left-1/2','transform','-translate-x-1/2','-translate-y-8','scale-75','origin-top','sm:scale-100','lg:hidden')),
                                                        height: String(784),
                                                        width: String(640),
                                                        fill: "none",
                                                        viewBox: "0 0 640 784"
                                                      }),
                                                  JsxRuntime.jsx("div", {
                                                        children: JsxRuntime.jsxs("button", {
                                                              children: [
                                                                JsxRuntime.jsx("span", {
                                                                      children: "Drag the slider to compare between the original photo and the AI generated artistic style version",
                                                                      className: (cx('sr-only'))
                                                                    }),
                                                                JsxRuntime.jsx("div", {
                                                                      children: JsxRuntime.jsx(ReactCompareSlider.ReactCompareSlider, {
                                                                            itemOne: JsxRuntime.jsx(make$3, {
                                                                                  src: image1.src,
                                                                                  alt: image1.alt,
                                                                                  breakpoints: {
                                                                                    default: "calc(100vw-(1rem*2))",
                                                                                    sm: "calc(640px - (1.5rem*3) - (1.5rem*2))",
                                                                                    md: "calc(768px - (1.5rem*3) - (1.5rem*2))",
                                                                                    lg: "calc(1024px - (1.5rem*3) - (2rem*2))",
                                                                                    xl: "calc(1280px - (2rem*3) - (2rem*2))",
                                                                                    xxl: "calc(1536px - (2rem*3) - (2rem*2))"
                                                                                  },
                                                                                  lazyLoad: false
                                                                                }),
                                                                            itemTwo: JsxRuntime.jsx(make$3, {
                                                                                  src: image2.src,
                                                                                  alt: image2.alt,
                                                                                  breakpoints: {
                                                                                    default: "calc(100vw-(1rem*2))",
                                                                                    sm: "calc(640px - (1.5rem*3) - (1.5rem*2))",
                                                                                    md: "calc(768px - (1.5rem*3) - (1.5rem*2))",
                                                                                    lg: "calc(1024px - (1.5rem*3) - (2rem*2))",
                                                                                    xl: "calc(1280px - (2rem*3) - (2rem*2))",
                                                                                    xxl: "calc(1536px - (2rem*3) - (2rem*2))"
                                                                                  },
                                                                                  lazyLoad: false
                                                                                })
                                                                          }),
                                                                      className: (cx('w-full'))
                                                                    })
                                                              ],
                                                              className: (cx('relative','block','w-full','bg-white','rounded-lg','overflow-hidden','focus:outline-none','focus:ring-2','focus:ring-offset-2','focus:ring-indigo-500')),
                                                              type: "button"
                                                            }),
                                                        className: (cx('relative','mx-auto','w-full','rounded-lg','shadow-lg','lg:max-w-md'))
                                                      })
                                                ],
                                                className: (cx('mt-12','relative','sm:max-w-lg','sm:mx-auto','lg:mt-0','lg:max-w-none','lg:mx-0','lg:col-span-6','lg:flex','lg:items-center'))
                                              })
                                        ],
                                        className: (cx('lg:grid','lg:grid-cols-12','lg:gap-8'))
                                      }),
                                  className: (cx('mt-16','sm:mt-24','lg:mt-32'))
                                })
                          }),
                      className: (cx('relative','pt-6','pb-16','sm:pb-24','lg:pb-32'))
                    })
              ],
              className: (cx('relative','bg-white','overflow-hidden'))
            });
}

var HeroSlider = {
  make: Ui$HeroSlider
};

function x(children) {
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              className: (cx('flex-1'))
                            }),
                        JsxRuntime.jsx("div", {
                              className: (cx('flex-1 w-full bg-gray-800'))
                            })
                      ],
                      "aria-hidden": true,
                      className: (cx('absolute inset-0 flex flex-col z-0'))
                    }),
                JsxRuntime.jsx("div", {
                      children: children,
                      className: (cx('max-w-7xl mx-auto px-4 sm:px-6 relative z-10'))
                    })
              ],
              className: (cx('relative'))
            });
}

function Ui$HalfBg(props) {
  var callToAction = props.callToAction;
  var children = props.children;
  if (callToAction !== undefined) {
    return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                children: [
                  x(children),
                  JsxRuntime.jsx("div", {
                        children: JsxRuntime.jsx("div", {
                              children: Caml_option.valFromOption(callToAction),
                              className: (cx('max-w-7xl mx-auto pb-8 px-4 sm:pb-12 sm:px-6 lg:px-8'))
                            }),
                        className: (cx('bg-gray-800'))
                      })
                ]
              });
  } else {
    return x(children);
  }
}

var HalfBg = {
  x: x,
  make: Ui$HalfBg
};

var CarouselCard = {};

var Domain = {
  CarouselCard: CarouselCard
};

var hoverStyle = (css`
    --tw-transform: translateX(var(--tw-translate-x))
    translateY(var(--tw-translate-y)) rotate(var(--tw-rotate))
    skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y))
    scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));

    @apply rounded-lg transition-transform hover:-translate-y-1 hover:bg-primary-900 duration-300;
    &:hover {
      /* transform: scaleX(1.05) scaleY(1.05); */
      @apply rounded-lg scale-105;
    }
  `);

var cardText = (cx('relative text-center text-white'));

var titleStyle = cx(cardText, (css`font-family: Georgia;`), "mt-auto", "text-xl");

var subtitleStyle = cx(cardText, (cx('italic text-sm')));

function Ui$CarouselCard(props) {
  var card = props.card;
  return JsxRuntime.jsxs("a", {
              children: [
                JsxRuntime.jsx("span", {
                      children: JsxRuntime.jsx(make$3, {
                            src: card.src,
                            alt: card.imageAlt,
                            className: (cx('w-full h-full object-center object-cover rounded-lg')),
                            imgixParams: {
                              auto: "format",
                              fit: "crop",
                              crop: "focalpoint"
                            },
                            width: 224,
                            height: 320,
                            lazyLoad: true
                          }),
                      "aria-hidden": true,
                      className: (cx('absolute inset-0'))
                    }),
                JsxRuntime.jsx("span", {
                      "aria-hidden": true,
                      className: (cx('absolute inset-x-0 bottom-0 h-2/3 bg-gradient-to-t from-gray-800 opacity-50'))
                    }),
                JsxRuntime.jsx("h2", {
                      children: card.title,
                      className: titleStyle
                    }),
                JsxRuntime.jsx("h3", {
                      children: card.subtitle,
                      className: subtitleStyle
                    })
              ],
              className: cx((cx('relative w-56 h-80 p-6 flex flex-col overflow-hidden')), hoverStyle),
              role: "listitem",
              href: card.link
            }, card.title);
}

var CarouselCard$1 = {
  hoverStyle: hoverStyle,
  cardText: cardText,
  titleStyle: titleStyle,
  subtitleStyle: subtitleStyle,
  make: Ui$CarouselCard
};

function Ui$CardCarousel(props) {
  var moreLink = props.moreLink;
  var moreText = props.moreText;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h2", {
                              children: props.title,
                              className: (cx('text-2xl font-extrabold tracking-tight text-gray-900'))
                            }),
                        JsxRuntime.jsxs("a", {
                              children: [
                                moreText,
                                JsxRuntime.jsx("span", {
                                      children: " \u2192",
                                      "aria-hidden": true
                                    })
                              ],
                              className: (cx('hidden text-sm font-semibold text-primary-900 hover:text-primary-900 sm:block')),
                              href: moreLink
                            })
                      ],
                      className: (cx('px-0 sm:px-0 sm:flex sm:items-center sm:justify-between lg:px-0 xl:px-0'))
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("div", {
                            children: JsxRuntime.jsx("div", {
                                  children: JsxRuntime.jsx("div", {
                                        children: Belt_Array.map(props.cards, (function (card) {
                                                return JsxRuntime.jsx(Ui$CarouselCard, {
                                                            card: card
                                                          }, card.src);
                                              })),
                                        className: (cx('absolute py-6 px-8 min-w-full flex space-x-8')),
                                        role: "list"
                                      }),
                                  className: (cx('box-content -mx-8 py-2 relative h-96 overflow-x-auto overflow-y-hidden'))
                                }),
                            className: (cx('-my-2'))
                          }),
                      className: (cx('mt-4 flow-root'))
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("a", {
                            children: [
                              moreText,
                              JsxRuntime.jsx("span", {
                                    children: " \u2192",
                                    "aria-hidden": true
                                  })
                            ],
                            className: (cx('block text-sm font-semibold text-primary-900 hover:text-primary-900')),
                            href: moreLink
                          }),
                      className: (cx('mt-0 px-4 sm:hidden text-center'))
                    })
              ],
              className: (cx('xl:mx-auto xl:px-0'))
            });
}

var CardCarousel = {
  make: Ui$CardCarousel
};

export {
  stringToElement ,
  addLazyLoad ,
  ReactCompareSlider$1 as ReactCompareSlider,
  ReactCompareSliderImage ,
  ImgixParams ,
  $$Image ,
  Imgix ,
  Source_Imgix ,
  Picture_Imgix ,
  Breakpoints ,
  Picture ,
  Img ,
  DImg ,
  ExclamationIcon ,
  Alert ,
  PageHeading ,
  Press ,
  Hero ,
  Hero2 ,
  HeroSlider ,
  HalfBg ,
  Domain ,
  CarouselCard$1 as CarouselCard,
  CardCarousel ,
}
/*  Not a pure module */

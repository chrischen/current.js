// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as ReactExperimental from "rescript-relay/src/ReactExperimental.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.mjs";
import * as EventsList_event_graphql from "../../__generated__/EventsList_event_graphql.mjs";
import * as EventsListFragment_graphql from "../../__generated__/EventsListFragment_graphql.mjs";
import * as EventsListRefetchQuery_graphql from "../../__generated__/EventsListRefetchQuery_graphql.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

var getConnectionNodes = EventsListFragment_graphql.Utils.getConnectionNodes;

var convertFragment = EventsListFragment_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(EventsListFragment_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, EventsListFragment_graphql.node, convertFragment);
}

var makeRefetchVariables = EventsListRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = EventsListRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(EventsListFragment_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(EventsListFragment_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(EventsListFragment_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

var convertFragment$1 = EventsList_event_graphql.Internal.convertFragment;

function use$1(fRef) {
  return RescriptRelay_Fragment.useFragment(EventsList_event_graphql.node, convertFragment$1, fRef);
}

function useOpt$1(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, EventsList_event_graphql.node, convertFragment$1);
}

var ItemFragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment$1,
  use: use$1,
  useOpt: useOpt$1
};

function EventsList$EventItem(props) {
  var match = use$1(props.event);
  return JsxRuntime.jsxs(ReactRouterDom.Link, {
              to: "/events/" + match.id,
              children: [
                Core__Option.getOr(match.title, "[Missing Title]"),
                "@",
                Core__Option.getOr(match.location, "[Location Missing]"),
                " - ",
                Core__Option.getOr((function (__x) {
                            return Core__Option.map(__x, Util.Datetime.toDate);
                          })(match.startDate), new Date()).toString()
              ]
            });
}

var EventItem = {
  make: EventsList$EventItem
};

function EventsList(props) {
  ReactExperimental.useTransition(undefined);
  var match = usePagination(props.events);
  var data = match.data;
  var events = getConnectionNodes(data.events);
  var pageInfo = Core__Option.map(data.events, (function (e) {
          return e.pageInfo;
        }));
  var hasPrevious = Core__Option.getOr(Core__Option.map(pageInfo, (function (e) {
              return e.hasPreviousPage;
            })), false);
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                hasPrevious && !match.isLoadingPrevious ? Core__Option.getOr(Core__Option.flatMap(pageInfo, (function (pageInfo) {
                              return Core__Option.map(pageInfo.startCursor, (function (startCursor) {
                                            return JsxRuntime.jsx(ReactRouterDom.Link, {
                                                        to: "/?before=" + startCursor,
                                                        children: "Load more"
                                                      });
                                          }));
                            })), null) : null,
                JsxRuntime.jsx("ul", {
                      children: events.map(function (edge) {
                            return JsxRuntime.jsx("li", {
                                        children: JsxRuntime.jsx(EventsList$EventItem, {
                                              event: edge.fragmentRefs
                                            })
                                      });
                          })
                    }),
                match.hasNext && !match.isLoadingNext ? Core__Option.getOr(Core__Option.flatMap(pageInfo, (function (pageInfo) {
                              console.log(pageInfo);
                              return Core__Option.map(pageInfo.endCursor, (function (endCursor) {
                                            return JsxRuntime.jsx(ReactRouterDom.Link, {
                                                        to: "/?after=" + endCursor,
                                                        children: "Load more"
                                                      });
                                          }));
                            })), null) : "End of the road."
              ]
            });
}

var make = EventsList;

var $$default = EventsList;

export {
  Fragment ,
  ItemFragment ,
  EventItem ,
  make ,
  $$default ,
  $$default as default,
}
/*  Not a pure module */

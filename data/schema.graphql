schema {
  query: Query
  mutation: Mutation
}

"Directs the executor to defer this fragment when the `if` argument is true or undefined."
directive @defer(
  """
  Deferred when true or undefined.
  """
  if: Boolean! = true
  """
  Unique name
  """
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to stream plural fields when the `if` argument is true or undefined."
directive @stream(
  """
  Stream when true or undefined.
  """
  if: Boolean! = true
  """
  Unique name
  """
  label: String
  """
  Number of items to return immediately
  """
  initialCount: Int = 0
) on FIELD

type Query {
  """
  The current time on the server, as a timestamp.
  """
  currentTime: Float
  currentTime2: Float
  currentTimeObj: CurrentTimeResponse!
  currentTimeObj2: CurrentTimeResponse!
  job(id: ID!): Job
  jobs(after: String, before: String, first: Int, last: Int): JobConnection!
}

type CurrentTimeResponse {
  currentTime: Float
}

type Job {
  attempts: Int
  id: ID!
  interval: Int
  status: Status!
  time: JsDate
}

union Status = Completed | Scheduled

type Completed {
  message: String
  success: Boolean!
}

type Scheduled {
  id: ID!
}

scalar JsDate

type JobConnection {
  """
  A list of edges.
  """
  edges: [JobEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type JobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: Job
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Mutation {
  createJob(input: CreateJobInput!): CreateJobResponse!
}

type CreateJobResponse {
  jobEdge: JobEdge!
}

input CreateJobInput {
  attempts: Int!
  form: FormInput!
  interval: Int!
  time: JsDate!
}

input FormInput {
  date: JsDate!
  endTime: Int!
  field: String!
  shop: String!
  startTime: Int!
}
